//! # D-Bus interface proxy for: `fi.w1.wpa_supplicant1.Interface.WPS`
//!
//! This code was generated by `zbus-xmlgen` `5.0.1` from D-Bus introspection data.
//! Source: `Interface '/fi/w1/wpa_supplicant1/Interfaces/3' from service 'fi.w1.wpa_supplicant1' on system bus`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the [Writing a client proxy] section of the zbus
//! documentation.
//!
//! This type implements the [D-Bus standard interfaces], (`org.freedesktop.DBus.*`) for which the
//! following zbus API can be used:
//!
//! * [`zbus::fdo::IntrospectableProxy`]
//! * [`zbus::fdo::PropertiesProxy`]
//!
//! Consequently `zbus-xmlgen` did not generate code for the above interfaces.
//!
//! [Writing a client proxy]: https://dbus2.github.io/zbus/client.html
//! [D-Bus standard interfaces]: https://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces,
use zbus::proxy;
#[proxy(
    interface = "fi.w1.wpa_supplicant1.Interface.WPS",
    default_service = "fi.w1.wpa_supplicant1",
)]
pub trait WPS {
    /// Cancel method
    fn cancel(&self) -> zbus::Result<()>;

    /// Start method
    fn start(
        &self,
        args: std::collections::HashMap<&str, &zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<std::collections::HashMap<String, zbus::zvariant::OwnedValue>>;

    /// Credentials signal
    #[zbus(signal)]
    fn credentials(
        &self,
        credentials: std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<()>;

    /// Event signal
    #[zbus(signal)]
    fn event(
        &self,
        name: &str,
        args: std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<()>;

    /// PropertiesChanged signal
    #[zbus(signal)]
    fn properties_changed(
        &self,
        properties: std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<()>;

    /// ConfigMethods property
    #[zbus(property)]
    fn config_methods(&self) -> zbus::Result<String>;
    #[zbus(property)]
    fn set_config_methods(&self, value: &str) -> zbus::Result<()>;

    /// DeviceName property
    #[zbus(property)]
    fn device_name(&self) -> zbus::Result<String>;
    #[zbus(property)]
    fn set_device_name(&self, value: &str) -> zbus::Result<()>;

    /// DeviceType property
    #[zbus(property)]
    fn device_type(&self) -> zbus::Result<Vec<u8>>;
    #[zbus(property)]
    fn set_device_type(&self, value: &[u8]) -> zbus::Result<()>;

    /// Manufacturer property
    #[zbus(property)]
    fn manufacturer(&self) -> zbus::Result<String>;
    #[zbus(property)]
    fn set_manufacturer(&self, value: &str) -> zbus::Result<()>;

    /// ModelName property
    #[zbus(property)]
    fn model_name(&self) -> zbus::Result<String>;
    #[zbus(property)]
    fn set_model_name(&self, value: &str) -> zbus::Result<()>;

    /// ModelNumber property
    #[zbus(property)]
    fn model_number(&self) -> zbus::Result<String>;
    #[zbus(property)]
    fn set_model_number(&self, value: &str) -> zbus::Result<()>;

    /// ProcessCredentials property
    #[zbus(property)]
    fn process_credentials(&self) -> zbus::Result<bool>;
    #[zbus(property)]
    fn set_process_credentials(&self, value: bool) -> zbus::Result<()>;

    /// SerialNumber property
    #[zbus(property)]
    fn serial_number(&self) -> zbus::Result<String>;
    #[zbus(property)]
    fn set_serial_number(&self, value: &str) -> zbus::Result<()>;
}
