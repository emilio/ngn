//! # D-Bus interface proxy for: `fi.w1.wpa_supplicant1.Peer`
//!
//! This code was generated by `zbus-xmlgen` `5.0.1` from D-Bus introspection data.
//! Source: `Interface '/fi/w1/wpa_supplicant1/Interfaces/0/Peers/baaccd29f2fa' from service 'fi.w1.wpa_supplicant1' on system bus`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the [Writing a client proxy] section of the zbus
//! documentation.
//!
//! This type implements the [D-Bus standard interfaces], (`org.freedesktop.DBus.*`) for which the
//! following zbus API can be used:
//!
//! * [`zbus::fdo::IntrospectableProxy`]
//! * [`zbus::fdo::PropertiesProxy`]
//!
//! Consequently `zbus-xmlgen` did not generate code for the above interfaces.
//!
//! [Writing a client proxy]: https://dbus2.github.io/zbus/client.html
//! [D-Bus standard interfaces]: https://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces,
use zbus::proxy;
#[proxy(
    interface = "fi.w1.wpa_supplicant1.Peer",
    default_service = "fi.w1.wpa_supplicant1"
)]
pub trait Peer {
    /// PropertiesChanged signal
    #[zbus(signal)]
    fn properties_changed(
        &self,
        properties: std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<()>;

    /// DeviceAddress property
    #[zbus(property)]
    fn device_address(&self) -> zbus::Result<Vec<u8>>;

    /// DeviceName property
    #[zbus(property)]
    fn device_name(&self) -> zbus::Result<String>;

    /// Groups property
    #[zbus(property)]
    fn groups(&self) -> zbus::Result<Vec<zbus::zvariant::OwnedObjectPath>>;

    /// IEs property
    #[zbus(property, name = "IEs")]
    fn ies(&self) -> zbus::Result<Vec<u8>>;

    /// Manufacturer property
    #[zbus(property)]
    fn manufacturer(&self) -> zbus::Result<String>;

    /// ModelName property
    #[zbus(property)]
    fn model_name(&self) -> zbus::Result<String>;

    /// ModelNumber property
    #[zbus(property)]
    fn model_number(&self) -> zbus::Result<String>;

    /// PrimaryDeviceType property
    #[zbus(property)]
    fn primary_device_type(&self) -> zbus::Result<Vec<u8>>;

    /// SecondaryDeviceTypes property
    #[zbus(property)]
    fn secondary_device_types(&self) -> zbus::Result<Vec<Vec<u8>>>;

    /// SerialNumber property
    #[zbus(property)]
    fn serial_number(&self) -> zbus::Result<String>;

    /// VSIE property
    #[zbus(property, name = "VSIE")]
    fn vsie(&self) -> zbus::Result<Vec<u8>>;

    /// VendorExtension property
    #[zbus(property)]
    fn vendor_extension(&self) -> zbus::Result<Vec<Vec<u8>>>;

    /// config_method property
    #[zbus(property, name = "config_method")]
    fn config_method(&self) -> zbus::Result<u16>;

    /// devicecapability property
    #[zbus(property, name = "devicecapability")]
    fn devicecapability(&self) -> zbus::Result<u8>;

    /// groupcapability property
    #[zbus(property, name = "groupcapability")]
    fn groupcapability(&self) -> zbus::Result<u8>;

    /// level property
    #[zbus(property, name = "level")]
    fn level(&self) -> zbus::Result<i32>;
}
