//! # D-Bus interface proxy for: `fi.w1.wpa_supplicant1.Group`
//!
//! This code was generated by `zbus-xmlgen` `5.0.1` from D-Bus introspection data.
//! Source: `Interface '/fi/w1/wpa_supplicant1/Interfaces/1/Groups/4I' from service 'fi.w1.wpa_supplicant1' on system bus`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the [Writing a client proxy] section of the zbus
//! documentation.
//!
//! This type implements the [D-Bus standard interfaces], (`org.freedesktop.DBus.*`) for which the
//! following zbus API can be used:
//!
//! * [`zbus::fdo::IntrospectableProxy`]
//! * [`zbus::fdo::PropertiesProxy`]
//!
//! Consequently `zbus-xmlgen` did not generate code for the above interfaces.
//!
//! [Writing a client proxy]: https://dbus2.github.io/zbus/client.html
//! [D-Bus standard interfaces]: https://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces,
use zbus::proxy;
#[proxy(
    interface = "fi.w1.wpa_supplicant1.Group",
    default_service = "fi.w1.wpa_supplicant1",
)]
pub trait Group {
    /// PeerDisconnected signal
    #[zbus(signal)]
    fn peer_disconnected(&self, peer: zbus::zvariant::ObjectPath<'_>) -> zbus::Result<()>;

    /// PeerJoined signal
    #[zbus(signal)]
    fn peer_joined(&self, peer: zbus::zvariant::ObjectPath<'_>) -> zbus::Result<()>;

    /// BSSID property
    #[zbus(property, name = "BSSID")]
    fn bssid(&self) -> zbus::Result<Vec<u8>>;

    /// Frequency property
    #[zbus(property)]
    fn frequency(&self) -> zbus::Result<u16>;

    /// Group property
    #[zbus(property)]
    fn group(&self) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// Members property
    #[zbus(property)]
    fn members(&self) -> zbus::Result<Vec<zbus::zvariant::OwnedObjectPath>>;

    /// PSK property
    #[zbus(property, name = "PSK")]
    fn psk(&self) -> zbus::Result<Vec<u8>>;

    /// Passphrase property
    #[zbus(property)]
    fn passphrase(&self) -> zbus::Result<String>;

    /// Role property
    #[zbus(property)]
    fn role(&self) -> zbus::Result<String>;

    /// SSID property
    #[zbus(property, name = "SSID")]
    fn ssid(&self) -> zbus::Result<Vec<u8>>;

    /// WPSVendorExtensions property
    #[zbus(property, name = "WPSVendorExtensions")]
    fn wpsvendor_extensions(&self) -> zbus::Result<Vec<Vec<u8>>>;
    #[zbus(property, name = "WPSVendorExtensions")]
    fn set_wpsvendor_extensions(&self, value: &[&[u8]]) -> zbus::Result<()>;
}
