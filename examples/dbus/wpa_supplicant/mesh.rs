//! # D-Bus interface proxy for: `fi.w1.wpa_supplicant1.Interface.Mesh`
//!
//! This code was generated by `zbus-xmlgen` `5.0.1` from D-Bus introspection data.
//! Source: `Interface '/fi/w1/wpa_supplicant1/Interfaces/3' from service 'fi.w1.wpa_supplicant1' on system bus`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the [Writing a client proxy] section of the zbus
//! documentation.
//!
//! This type implements the [D-Bus standard interfaces], (`org.freedesktop.DBus.*`) for which the
//! following zbus API can be used:
//!
//! * [`zbus::fdo::IntrospectableProxy`]
//! * [`zbus::fdo::PropertiesProxy`]
//!
//! Consequently `zbus-xmlgen` did not generate code for the above interfaces.
//!
//! [Writing a client proxy]: https://dbus2.github.io/zbus/client.html
//! [D-Bus standard interfaces]: https://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces,
use zbus::proxy;
#[proxy(
    interface = "fi.w1.wpa_supplicant1.Interface.Mesh",
    default_service = "fi.w1.wpa_supplicant1",
)]
pub trait Mesh {
    /// MeshGroupRemoved signal
    #[zbus(signal)]
    fn mesh_group_removed(
        &self,
        args: std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<()>;

    /// MeshGroupStarted signal
    #[zbus(signal)]
    fn mesh_group_started(
        &self,
        args: std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<()>;

    /// MeshPeerConnected signal
    #[zbus(signal)]
    fn mesh_peer_connected(
        &self,
        args: std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<()>;

    /// MeshPeerDisconnected signal
    #[zbus(signal)]
    fn mesh_peer_disconnected(
        &self,
        args: std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<()>;

    /// MeshGroup property
    #[zbus(property)]
    fn mesh_group(&self) -> zbus::Result<Vec<u8>>;

    /// MeshPeers property
    #[zbus(property)]
    fn mesh_peers(&self) -> zbus::Result<Vec<Vec<u8>>>;
}
