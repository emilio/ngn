//! # D-Bus interface proxy for: `fi.w1.wpa_supplicant1.Interface.P2PDevice`
//!
//! This code was generated by `zbus-xmlgen` `5.0.1` from D-Bus introspection data.
//! Source: `Interface '/fi/w1/wpa_supplicant1/Interfaces/3' from service 'fi.w1.wpa_supplicant1' on system bus`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the [Writing a client proxy] section of the zbus
//! documentation.
//!
//! This type implements the [D-Bus standard interfaces], (`org.freedesktop.DBus.*`) for which the
//! following zbus API can be used:
//!
//! * [`zbus::fdo::IntrospectableProxy`]
//! * [`zbus::fdo::PropertiesProxy`]
//!
//! Consequently `zbus-xmlgen` did not generate code for the above interfaces.
//!
//! [Writing a client proxy]: https://dbus2.github.io/zbus/client.html
//! [D-Bus standard interfaces]: https://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces,
use zbus::proxy;
#[proxy(
    interface = "fi.w1.wpa_supplicant1.Interface.P2PDevice",
    default_service = "fi.w1.wpa_supplicant1"
)]
pub trait P2PDevice {
    /// AddPersistentGroup method
    fn add_persistent_group(
        &self,
        args: std::collections::HashMap<&str, &zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// AddService method
    fn add_service(
        &self,
        args: std::collections::HashMap<&str, &zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<()>;

    /// Cancel method
    fn cancel(&self) -> zbus::Result<()>;

    /// Connect method
    fn connect(
        &self,
        args: std::collections::HashMap<&str, &zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<String>;

    /// DeleteService method
    fn delete_service(
        &self,
        args: std::collections::HashMap<&str, &zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<()>;

    /// Disconnect method
    fn disconnect(&self) -> zbus::Result<()>;

    /// ExtendedListen method
    fn extended_listen(
        &self,
        args: std::collections::HashMap<&str, &zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<()>;

    /// Find method
    fn find(
        &self,
        args: std::collections::HashMap<&str, &zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<()>;

    /// Flush method
    fn flush(&self) -> zbus::Result<()>;

    /// FlushService method
    fn flush_service(&self) -> zbus::Result<()>;

    /// GroupAdd method
    fn group_add(
        &self,
        args: std::collections::HashMap<&str, &zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<()>;

    /// Invite method
    fn invite(
        &self,
        args: std::collections::HashMap<&str, &zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<()>;

    /// Listen method
    fn listen(&self, timeout: i32) -> zbus::Result<()>;

    /// PresenceRequest method
    fn presence_request(
        &self,
        args: std::collections::HashMap<&str, &zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<()>;

    /// ProvisionDiscoveryRequest method
    fn provision_discovery_request(
        &self,
        peer: &zbus::zvariant::ObjectPath<'_>,
        config_method: &str,
    ) -> zbus::Result<()>;

    /// RejectPeer method
    fn reject_peer(&self, peer: &zbus::zvariant::ObjectPath<'_>) -> zbus::Result<()>;

    /// RemoveAllPersistentGroups method
    fn remove_all_persistent_groups(&self) -> zbus::Result<()>;

    /// RemoveClient method
    fn remove_client(
        &self,
        args: std::collections::HashMap<&str, &zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<()>;

    /// RemovePersistentGroup method
    fn remove_persistent_group(&self, path: &zbus::zvariant::ObjectPath<'_>) -> zbus::Result<()>;

    /// ServiceDiscoveryCancelRequest method
    fn service_discovery_cancel_request(&self, args: u64) -> zbus::Result<()>;

    /// ServiceDiscoveryExternal method
    fn service_discovery_external(&self, arg: i32) -> zbus::Result<()>;

    /// ServiceDiscoveryRequest method
    fn service_discovery_request(
        &self,
        args: std::collections::HashMap<&str, &zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<u64>;

    /// ServiceDiscoveryResponse method
    fn service_discovery_response(
        &self,
        args: std::collections::HashMap<&str, &zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<()>;

    /// ServiceUpdate method
    fn service_update(&self) -> zbus::Result<()>;

    /// StopFind method
    fn stop_find(&self) -> zbus::Result<()>;

    /// DeviceFound signal
    #[zbus(signal)]
    fn device_found(&self, path: zbus::zvariant::ObjectPath<'_>) -> zbus::Result<()>;

    /// DeviceFoundProperties signal
    #[zbus(signal)]
    fn device_found_properties(
        &self,
        path: zbus::zvariant::ObjectPath<'_>,
        properties: std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<()>;

    /// DeviceLost signal
    #[zbus(signal)]
    fn device_lost(&self, path: zbus::zvariant::ObjectPath<'_>) -> zbus::Result<()>;

    /// FindStopped signal
    #[zbus(signal)]
    fn find_stopped(&self) -> zbus::Result<()>;

    /// GONegotiationFailure signal
    #[zbus(signal, name = "GONegotiationFailure")]
    fn gonegotiation_failure(
        &self,
        properties: std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<()>;

    /// GONegotiationRequest signal
    #[zbus(signal, name = "GONegotiationRequest")]
    fn gonegotiation_request(
        &self,
        path: zbus::zvariant::ObjectPath<'_>,
        dev_passwd_id: u16,
        device_go_intent: u8,
    ) -> zbus::Result<()>;

    /// GONegotiationSuccess signal
    #[zbus(signal, name = "GONegotiationSuccess")]
    fn gonegotiation_success(
        &self,
        properties: std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<()>;

    /// GroupFinished signal
    #[zbus(signal)]
    fn group_finished(
        &self,
        properties: std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<()>;

    /// GroupFormationFailure signal
    #[zbus(signal)]
    fn group_formation_failure(&self, reason: &str) -> zbus::Result<()>;

    /// GroupStarted signal
    #[zbus(signal)]
    fn group_started(
        &self,
        properties: std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<()>;

    /// InvitationReceived signal
    #[zbus(signal)]
    fn invitation_received(
        &self,
        properties: std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<()>;

    /// InvitationResult signal
    #[zbus(signal)]
    fn invitation_result(
        &self,
        invite_result: std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<()>;

    /// PersistentGroupAdded signal
    #[zbus(signal)]
    fn persistent_group_added(
        &self,
        path: zbus::zvariant::ObjectPath<'_>,
        properties: std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<()>;

    /// PersistentGroupRemoved signal
    #[zbus(signal)]
    fn persistent_group_removed(&self, path: zbus::zvariant::ObjectPath<'_>) -> zbus::Result<()>;

    /// ProvisionDiscoveryFailure signal
    #[zbus(signal)]
    fn provision_discovery_failure(
        &self,
        peer_object: zbus::zvariant::ObjectPath<'_>,
        status: i32,
    ) -> zbus::Result<()>;

    /// ProvisionDiscoveryPBCRequest signal
    #[zbus(signal, name = "ProvisionDiscoveryPBCRequest")]
    fn provision_discovery_pbcrequest(
        &self,
        peer_object: zbus::zvariant::ObjectPath<'_>,
    ) -> zbus::Result<()>;

    /// ProvisionDiscoveryPBCResponse signal
    #[zbus(signal, name = "ProvisionDiscoveryPBCResponse")]
    fn provision_discovery_pbcresponse(
        &self,
        peer_object: zbus::zvariant::ObjectPath<'_>,
    ) -> zbus::Result<()>;

    /// ProvisionDiscoveryRequestDisplayPin signal
    #[zbus(signal)]
    fn provision_discovery_request_display_pin(
        &self,
        peer_object: zbus::zvariant::ObjectPath<'_>,
        pin: &str,
    ) -> zbus::Result<()>;

    /// ProvisionDiscoveryRequestEnterPin signal
    #[zbus(signal)]
    fn provision_discovery_request_enter_pin(
        &self,
        peer_object: zbus::zvariant::ObjectPath<'_>,
    ) -> zbus::Result<()>;

    /// ProvisionDiscoveryResponseDisplayPin signal
    #[zbus(signal)]
    fn provision_discovery_response_display_pin(
        &self,
        peer_object: zbus::zvariant::ObjectPath<'_>,
        pin: &str,
    ) -> zbus::Result<()>;

    /// ProvisionDiscoveryResponseEnterPin signal
    #[zbus(signal)]
    fn provision_discovery_response_enter_pin(
        &self,
        peer_object: zbus::zvariant::ObjectPath<'_>,
    ) -> zbus::Result<()>;

    /// ServiceDiscoveryRequest signal
    #[zbus(signal)]
    fn service_discovery_request(
        &self,
        sd_request: std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<()>;

    /// ServiceDiscoveryResponse signal
    #[zbus(signal)]
    fn service_discovery_response(
        &self,
        sd_response: std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<()>;

    /// WpsFailed signal
    #[zbus(signal)]
    fn wps_failed(
        &self,
        name: &str,
        args: std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<()>;

    /// Group property
    #[zbus(property)]
    fn group(&self) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// P2PDeviceConfig property
    #[zbus(property, name = "P2PDeviceConfig")]
    fn p2pdevice_config(
        &self,
    ) -> zbus::Result<std::collections::HashMap<String, zbus::zvariant::OwnedValue>>;
    #[zbus(property, name = "P2PDeviceConfig")]
    fn set_p2pdevice_config(
        &self,
        value: std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<()>;

    /// PeerGO property
    #[zbus(property, name = "PeerGO")]
    fn peer_go(&self) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// Peers property
    #[zbus(property)]
    fn peers(&self) -> zbus::Result<Vec<zbus::zvariant::OwnedObjectPath>>;

    /// PersistentGroups property
    #[zbus(property)]
    fn persistent_groups(&self) -> zbus::Result<Vec<zbus::zvariant::OwnedObjectPath>>;

    /// DeviceAddress property
    // #[zbus(property)]
    // fn device_address(&self) -> zbus::Result<Vec<u8>>;

    /// Role property
    #[zbus(property)]
    fn role(&self) -> zbus::Result<String>;
}
